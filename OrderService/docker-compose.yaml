version: '3.8'

services:
  # --- PostgreSQL for UserService ---
  user-db:
    image: postgres:15
    container_name: user_service_postgres
    environment:
      POSTGRES_DB: userservice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root # Matches UserService properties
    ports:
      - "5433:5432" # Host port 5433 maps to container's default 5432
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    networks:
      - microservices_network
    restart: unless-stopped

  # --- PostgreSQL for OrderService ---
  order-db:
    image: postgres:15
    container_name: order_service_postgres
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres # Matches OrderService properties
    ports:
      - "5432:5432" # Host port 5432 maps to container's default 5432
    volumes:
      - order_pgdata:/var/lib/postgresql/data
    networks:
      - microservices_network
    restart: unless-stopped

  # --- MongoDB for FoodItemService ---
  fooditem-mongodb:
    image: mongo:latest
    container_name: fooditem_service_mongodb
    ports:
      - "27017:27017" # Default MongoDB port
    volumes:
      - fooditem_mongodata:/data/db
    networks:
      - microservices_network
    restart: unless-stopped
    # No explicit DB creation needed via env vars for Mongo like for Postgres,
    # FoodItemService will create 'fooditemdb' when it connects if it doesn't exist.

  # --- Redis Cache for UserService ---
  user-redis-cache:
    image: redis:latest
    container_name: user_service_redis_cache
    ports:
      - "6379:6379" # Default Redis port
    networks:
      - microservices_network
    restart: unless-stopped

  # --- RabbitMQ (Shared by all services) ---
  rabbitmq:
    image: rabbitmq:3-management # Includes the management UI
    container_name: shared_rabbitmq_broker
    ports:
      - "5672:5672"  # AMQP port for applications
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest # Matches all service properties
      RABBITMQ_DEFAULT_PASS: guest # Matches all service properties
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Optional: for persisting RabbitMQ state
    networks:
      - microservices_network
    restart: unless-stopped

  # --- Optional: RedisInsight for viewing Redis data ---
  # redisinsight:
  #   image: redis/redisinsight:latest
  #   container_name: redis_insight_ui
  #   ports:
  #     - "5540:5540" # Or 8001:8001 depending on the version/docs
  #   networks:
  #     - microservices_network
  #   restart: always

# Define a shared network for all services
networks:
  microservices_network:
    driver: bridge

# Define named volumes for data persistence
volumes:
  user_pgdata:
  order_pgdata:
  fooditem_mongodata:
  rabbitmq_data: # Optional, but good for dev consistency